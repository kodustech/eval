{
  "overallSummary": "Este PR adiciona timeout handling, middleware support e melhora o batch processing no TaskQueueProcessor. Foram identificados três bugs: o processNext é chamado em loop sem await causando múltiplas execuções simultâneas, o middleware assume estrutura de objeto mas use() adiciona funções diretamente, e updateAverageTime pode dividir por zero.",
  "codeSuggestions": [
    {
      "relevantFile": "services/TaskQueueProcessor.js",
      "language": "javascript",
      "suggestionContent": "No finally block de processNext, this.processNext() é chamado sem await dentro de um loop condicional. Isso pode causar múltiplas tarefas sendo processadas simultaneamente além do limite de concorrência, pois cada chamada inicia imediatamente sem esperar a anterior completar.",
      "existingCode": "} finally {\n  const index = this.active.indexOf(task);\n  if (index > -1) {\n    this.active.splice(index, 1);\n  }\n  \n  if (this.queue.length > 0) {\n    this.processNext();\n  }\n}",
      "improvedCode": "} finally {\n  const index = this.active.indexOf(task);\n  if (index > -1) {\n    this.active.splice(index, 1);\n  }\n  \n  // Use setImmediate or process.nextTick to avoid stack overflow\n  if (this.queue.length > 0) {\n    setImmediate(() => this.processNext());\n  }\n}",
      "oneSentenceSummary": "Use setImmediate para evitar processamento simultâneo além do limite de concorrência",
      "relevantLinesStart": 86,
      "relevantLinesEnd": 94,
      "label": "potential_error"
    },
    {
      "relevantFile": "services/TaskQueueProcessor.js",
      "language": "javascript",
      "suggestionContent": "O método use() adiciona funções diretamente ao array middleware, mas runMiddleware espera objetos com propriedades phase e fn. Isso causará erro quando tentar acessar middleware.phase, pois middleware será uma função, não um objeto.",
      "existingCode": "use(middlewareFn) {\n  this.middleware.push(middlewareFn);\n}\n\n// ...\n\nasync runMiddleware(task, phase) {\n  for (const middleware of this.middleware) {\n    if (middleware.phase === phase) {\n      await middleware.fn(task);\n    }\n  }\n}",
      "improvedCode": "use(phase, middlewareFn) {\n  if (typeof middlewareFn !== 'function') {\n    throw new Error('Middleware must be a function');\n  }\n  this.middleware.push({ phase, fn: middlewareFn });\n}\n\n// ...\n\nasync runMiddleware(task, phase) {\n  for (const middleware of this.middleware) {\n    if (middleware.phase === phase) {\n      await middleware.fn(task);\n    }\n  }\n}",
      "oneSentenceSummary": "Ajuste o método use para criar objetos com phase e fn conforme esperado por runMiddleware",
      "relevantLinesStart": 31,
      "relevantLinesEnd": 33,
      "label": "potential_error"
    },
    {
      "relevantFile": "services/TaskQueueProcessor.js",
      "language": "javascript",
      "suggestionContent": "Em updateAverageTime, quando processingTimes está vazio ou tem menos de 100 itens no início, slice(-100) retorna um array vazio. Dividir por times.length (0) resulta em NaN, que será atribuído a averageTime, causando problemas em métricas e comparações.",
      "existingCode": "updateAverageTime() {\n  const times = this.metrics.processingTimes.slice(-100);\n  const sum = times.reduce((acc, time) => acc + time, 0);\n  this.metrics.averageTime = sum / times.length;\n}",
      "improvedCode": "updateAverageTime() {\n  const times = this.metrics.processingTimes.slice(-100);\n  if (times.length === 0) {\n    this.metrics.averageTime = 0;\n    return;\n  }\n  const sum = times.reduce((acc, time) => acc + time, 0);\n  this.metrics.averageTime = sum / times.length;\n}",
      "oneSentenceSummary": "Adicione verificação para array vazio antes de calcular média para evitar NaN",
      "relevantLinesStart": 166,
      "relevantLinesEnd": 170,
      "label": "potential_error"
    }
  ]
} 